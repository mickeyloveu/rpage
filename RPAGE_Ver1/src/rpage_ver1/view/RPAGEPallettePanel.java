/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package rpage_ver1.view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;

import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JButton;

import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import rpage_ver1.controller.DefaultController;
import rpage_ver1.controller.PropertyController;
import rpage_ver1.controller.ShapeMode;
import rpage_ver1.model.UOW;

/**
 *
 * @author ducluu84
 */
public class RPAGEPallettePanel extends JPanel {

     //  The controller used by this view
    private DefaultController defaultController;

    // This panel uses BoxLayout
    Box uowPalBox, pPalBox;

    // This pallette contains symbol and icon to draw UOW diagrams
    private JButton uowSymbolButton;
    private JButton uowRelButton;
    private JButton uowRelNameButton;
    private JButton uowOutsideWorldButton;

    // this button allows user to create a new case process
    private JButton pCPSymbolButton;

    // this button allows user to create a new case management process
    private JButton pCMPSymbolButton;
    private JButton pRelButton;
    private JButton pRelNameButton;
/******************************************************************************/
         //Constructor and initComponents
/******************************************************************************/
    public RPAGEPallettePanel(DefaultController defaultController){
        this.defaultController = defaultController;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     */
    private void initComponents() {
        Dimension buttonDimension = new Dimension (170,170);

        uowSymbolButton = new JButton("UOW");
        uowSymbolButton.setHorizontalAlignment(SwingConstants.LEFT);
        uowSymbolButton.setToolTipText("Click this button to create a new uow");

        uowRelButton = new JButton ("UOW Relationship");
        uowRelButton.setToolTipText("Click this button to create a new relationship");

        uowRelNameButton = new JButton ("Relationship name");
        uowRelNameButton.setToolTipText("Click this button to create a new relationship name");

        uowOutsideWorldButton = new JButton("Outside world");
        uowOutsideWorldButton.setToolTipText("Click this button to create a new outside world symbol");

        uowSymbolButton.setMinimumSize(buttonDimension);
        uowSymbolButton.setMaximumSize(buttonDimension);

        uowRelButton.setMinimumSize(buttonDimension);
        uowRelButton.setMaximumSize(buttonDimension);

        uowRelNameButton.setMinimumSize(buttonDimension);
        uowRelNameButton.setMaximumSize(buttonDimension);

        uowOutsideWorldButton.setMinimumSize(buttonDimension);
        uowOutsideWorldButton.setMaximumSize(buttonDimension);

        pCPSymbolButton = new JButton("Case Process");
        pCPSymbolButton.setHorizontalAlignment(SwingConstants.LEFT);
        pCPSymbolButton.setToolTipText("Click this button to create a new case process");

        pCMPSymbolButton = new JButton("Management Process");
        pCMPSymbolButton.setHorizontalAlignment(SwingConstants.LEFT);
        pCMPSymbolButton.setToolTipText("Click this button to create a new case management process");

        pRelButton = new JButton ("Process relationship");
        pRelButton.setToolTipText("Click this button to create a new relationship");

        pRelNameButton = new JButton ("Relationship name");
        pRelNameButton.setToolTipText("Click this button to create a new relationship name");

        pCPSymbolButton.setMinimumSize(buttonDimension);
        pCPSymbolButton.setMaximumSize(buttonDimension);

        pCMPSymbolButton.setMinimumSize(buttonDimension);
        pCMPSymbolButton.setMaximumSize(buttonDimension);

        pRelButton.setMinimumSize(buttonDimension);
        pRelButton.setMaximumSize(buttonDimension);

        pRelNameButton.setMinimumSize(buttonDimension);
        pRelNameButton.setMaximumSize(buttonDimension);

        addUOWPalPanel();

        // default controller will handle events generated by uow symbol button
        // Create a new UOW
        uowSymbolButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.uowPalUOWSymbolButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        // default controller will handle events generated by uow relationship button
        // Create a new relationship in UOW diagram
        uowRelButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.uowPalRelButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        // default controller will handle events generated by uow relationship name button
        // Create a new relationship name in UOW diagram
        uowRelNameButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.uowPalRelNameButton(actionEvent);
            }
        });

        // default controller will handle events generated by uow outside world button
        // Create a new outside world symbol
        uowOutsideWorldButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.uowPalOutsideWorldButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        // default controller will handle events generated by case process symbol button
        // Create a new case process in first cut diagram
        pCPSymbolButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.pPalCPSymbolButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        // default controller will handle events generated by case process symbol button
        // Create a new case management process in first cut diagram
        pCMPSymbolButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.pPalCMPSymbolButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        // default controller will handle events generated by case process symbol button
        // Create a new case management process in first cut diagram
        pRelButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.pPalRelSymbolButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        pRelNameButton.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent actionEvent){
                defaultController.pPalRelNameButton(actionEvent);
                // request focus so that key events in palette panel can be handled
                requestFocus();
            }
        });

        addKeyListener( new KeyListener(){
            public void keyPressed(KeyEvent keyEvent){
            defaultController.keyPressedInPalette(keyEvent);
        }

        public void keyReleased(KeyEvent e){
        }

        public void keyTyped(KeyEvent e){
        }
        }
        );// end addKeyListener

        addMouseMotionListener( new MouseMotionAdapter(){
                public void mouseMoved(MouseEvent mouseEvent){
                    // delegate the processing of this event to defaultController
                    defaultController.paletteMouseMoved(mouseEvent);
                }
            }
            );
    }
/******************************************************************************/
         //Other methods
/******************************************************************************/
    public void addUOWPalPanel(){
        removePPalPanel();

        uowPalBox = Box.createVerticalBox();

        uowPalBox.add(Box.createRigidArea(new Dimension(0,20)));
        uowPalBox.add(uowSymbolButton);
        uowPalBox.add(Box.createRigidArea(new Dimension(0,10)));
        uowPalBox.add(uowRelButton);
        uowPalBox.add(Box.createRigidArea(new Dimension(0,10)));
        uowPalBox.add(uowRelNameButton);
        uowPalBox.add(Box.createRigidArea(new Dimension(0,10)));
        uowPalBox.add(uowOutsideWorldButton);
        uowPalBox.add(Box.createRigidArea(new Dimension(0,10)));

        Border emptyBorder = BorderFactory.createEmptyBorder(10, 10, 10, 10);

        TitledBorder titledBorder = BorderFactory.createTitledBorder(emptyBorder, "UOW Palette Tool");
        uowPalBox.setBorder(titledBorder);

        this.add(uowPalBox);
    }

    public void removeUOWPalPanel(){
        if (uowPalBox != null){
            remove(uowPalBox);
        }
        validate();
    }

     public void addPPalPanel(){
        removeUOWPalPanel();

        pPalBox = Box.createVerticalBox();

        Dimension buttonDimension = new Dimension (170,170);

        pPalBox.add(Box.createRigidArea(new Dimension(0,20)));
        pPalBox.add(pCPSymbolButton);
        pPalBox.add(Box.createRigidArea(new Dimension(0,20)));
        pPalBox.add(pCMPSymbolButton);
        pPalBox.add(Box.createRigidArea(new Dimension(0,10)));
        pPalBox.add(pRelButton);
        pPalBox.add(Box.createRigidArea(new Dimension(0,10)));
        pPalBox.add(pRelNameButton);
        pPalBox.add(Box.createRigidArea(new Dimension(0,10)));

        Border emptyBorder = BorderFactory.createEmptyBorder(10, 10, 10, 10);

        TitledBorder titledBorder = BorderFactory.createTitledBorder(emptyBorder, "Process Palette Tool");
        pPalBox.setBorder(titledBorder);

        this.add(pPalBox);
    }

    public void removePPalPanel(){
        if (pPalBox != null){
            remove(pPalBox);
        }
        validate();
    }

}
